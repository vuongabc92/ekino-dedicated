<?php

/**
 * @file
 * Baybel Duplication of content.
 * Choose duplication scope (Contents-Types, Taxonomy, Menu, Blocks, etc...).
 * Choose origin and target language.
 */

/**
 * Implements hook_menu().
 */
function babybel_duplication_menu() {
  $items = array();

  $items['admin/config/content/duplication'] = array(
    'title' => 'Duplicate content',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('babybel_duplication_admin_form'),
    'access arguments' => array('configure duplication'),
    'type' => MENU_NORMAL_ITEM,
  );

  return $items;
}
/**
 * Implement hook_permission()
 * @return type
 */
function babybel_duplication_permission() {
  return array(
    'configure duplication' => array(
      'title' => t('Configure duplication'),
      'description' => t('access duplication user pages'),
    ),
  );
}
/**
 * Implements hook_form().
 */
function babybel_duplication_admin_form($form, &$form_state) {
  $lang_default = language_default();
  $languages_data = language_list();
  $source_languages_list = array();
  $translated_languages_list = array();

  foreach ($languages_data as $language) {
    if ($language->language == $lang_default->language) {
      $source_languages_list[$language->language] = $language->name;
    }
    if ($language->language != $lang_default->language) {
      $translated_languages_list[$language->language] = $language->name;
    }
  }

  $options_translation_entities = array(
    'taxonomy' => t('Taxonomy'),
    'node' => t('Content'),
    'menu' => t('Menu'),
    'variables' => t('Block configuration (variables)')
  );


  $taxonomies = taxonomy_get_vocabularies();
  $options_taxonomy = array();
  foreach ($taxonomies as $taxonomy) {
    $options_taxonomy[$taxonomy->machine_name] = $taxonomy->name;
  }
  unset($options_taxonomy['countries']);

  $node_types = node_type_get_types();
  $options_node_type = array();
  foreach ($node_types as $node_type) {
    $options_node_type[$node_type->type] = $node_type->name;
  }

  $menus = menu_get_menus();
  $dev_menus = array('devel', 'management', 'navigation', 'user-menu','menu-dispatch','features');
  $options_menu = array();
  foreach ($menus as $machine_name => $title) {
    if (!in_array($machine_name, $dev_menus)) {
      $options_menu[$machine_name] = $title;
    }
  }

  $form['source_language'] = array(
    '#type' => 'select',
    '#title' => t('Source language'),
    '#options' => $source_languages_list,
    '#default_value' => $source_language_default,
  );

  $form['translation_language'] = array(
    '#type' => 'select',
    '#title' => t('Translation language'),
    '#options' => $translated_languages_list,
    '#default_value' => $source_language_default,
  );

  $form['translatable_entities'] = array(
    '#type' => 'fieldset',
    '#title' => t('Translatable entities'),
    '#description' => t('Select the elements you wish to duplicate.'),
    '#collapsible' => TRUE,
    '#collapsed' => FALSE,
  );

  $form['translatable_entities']['translatable_entity_items'] = array(
    '#type' => 'checkboxes',
    '#title' => t('Translatable entities'),
    '#title_display' => 'invisible',
    '#options' => $options_translation_entities,
    '#default_value' => array_keys($options_translation_entities)
  );

  $form['taxonomies'] = array(
    '#type' => 'fieldset',
    '#title' => t('Taxonomies'),
    '#description' => t('Select the taxonomies you wish to duplicate'),
    '#collapsible' => TRUE,
    '#collapsed' => TRUE,
  );

  $form['taxonomies']['taxonomy_items'] = array(
    '#type' => 'checkboxes',
    '#title' => t('Taxonomies'),
    '#title_display' => 'invisible',
    '#options' => $options_taxonomy,
    '#default_value' => array_keys($options_taxonomy)
  );

  $form['node_types'] = array(
    '#type' => 'fieldset',
    '#title' => t('Content types'),
    '#description' => t('Select the content you wish to duplicate'),
    '#collapsible' => TRUE,
    '#collapsed' => TRUE,
  );

  $form['node_types']['node_type_items'] = array(
    '#type' => 'checkboxes',
    '#title' => t('Content types'),
    '#title_display' => 'invisible',
    '#options' => $options_node_type,
    '#default_value' => array_keys($options_node_type)
  );

  $form['menus'] = array(
    '#type' => 'fieldset',
    '#title' => t('Menus'),
    '#description' => t('Select the menus you wish to duplicate'),
    '#collapsible' => TRUE,
    '#collapsed' => TRUE,
  );

  $form['menus']['menu_items'] = array(
    '#type' => 'checkboxes',
    '#title' => t('Menus'),
    '#title_display' => 'invisible',
    '#options' => $options_menu,
    '#default_value' => array_keys($options_menu)
  );

  $form['submit'] = array(
    '#type' => 'submit',
    '#value' => t('Duplicate'),
  );

  return $form;
}

/**
 * Implements hook_form_validate().
 */
function babybel_duplication_admin_form_validate($form, &$form_state) {
  $source_language = $form_state['values']['source_language'];
  $translation_language = $form_state['values']['translation_language'];
  $languages = language_list('language');

  if ($source_language == '' || !in_array($source_language, array_keys($languages))) {
    form_set_error('source_language', 'You must select one language as source language');
  }
  if ($translation_language == '' || !in_array($translation_language, array_keys($languages))) {
    form_set_error('translation_language', 'You must select one language as translation language');
  }
  if ($source_language == $translation_language) {
    form_set_error('source_language][translated_language', 'Select two different languages.');
  }
}

/**
 * Implements hook_form_submit().
 */
function babybel_duplication_admin_form_submit($form, &$form_state) {
  // Create a batch for each entity.
  if ($form_state['values']['translatable_entity_items']['node']) {
    batch_set(duplication_build_batch_set_node($form_state['values']));
  }
  if ($form_state['values']['translatable_entity_items']['taxonomy']) {
    batch_set(duplication_build_batch_set_taxonomy($form_state['values']));
  }
  if ($form_state['values']['translatable_entity_items']['menu']) {
    batch_set(duplication_build_batch_set_menu($form_state['values']));
  }
  if ($form_state['values']['translatable_entity_items']['variables']) {

    batch_set(duplication_build_batch_set_variables($form_state['values']));
  }
  batch_process();
}

/**
 * Run batch operation for node entity.
 */
function duplication_build_batch_set_node($values) {
  // List the batch's functions.
  $operations_duplicate_content = array();
  $operations_duplicate_node_references = array();

  foreach ($values['node_type_items'] as $node_type) {
    if ($node_type) {
      $operations_duplicate_content[] = array(
        'babybel_duplication_content',
        array(
          array(
            'node_type' => $node_type,
            'source_language' => $values['source_language'],
            'translation_language' => $values['translation_language']
          )
        )
      );

      $operations_duplicate_node_references[] = array('babybel_duplication_node_references', array($node_type, $values['translation_language']));
    }
  }

  // Build the batch
  $batch = array(
    'title' => t('Duplication'),
    'init_message' => t('Initializing'),
    'progress_message' => t('Duplication of content : operation @current out of @total.'),
    'error_message' => t('An error occured.'),
    'operations' => array_merge($operations_duplicate_content, $operations_duplicate_node_references),
    'finished' => 'babybel_duplication_content_finished',
    'file' => sprintf('%s/babybel_duplication.batch.node.inc', drupal_get_path('module', 'babybel_duplication'))
  );

  return $batch;
}

/**
 * Run batch operation for taxonomy entity.
 */
function duplication_build_batch_set_taxonomy($values) {
  // Create batch operations
  $taxonomies = taxonomy_get_vocabularies();
  $batch_operations = array();

  foreach ($values['taxonomy_items'] as $machine_name => $title) {
    if ($title) {
      $batch_operations[] = array('babybel_duplication_taxonomy', array(
          array(
            'taxonomy' => taxonomy_vocabulary_machine_name_load($machine_name),
            'source_language' => $values['source_language'],
            'translation_language' => $values['translation_language']
          )
      ));
    }
  }

  // Create batch
  $batch = array(
    'title' => t('Duplication'),
    'init_message' => t('Initializing'),
    'progress_message' => t('Duplication of taxonomy terms : operation @current out of @total.'),
    'error_message' => t('An error occured.'),
    'operations' => $batch_operations,
    'finished' => 'babybel_duplication_taxonomy_finished',
    'file' => sprintf('%s/babybel_duplication.batch.taxonomy.inc', drupal_get_path('module', 'babybel_duplication'))
  );

  return $batch;
}

/**
 * Run batch operation for menu.
 */
function duplication_build_batch_set_menu($values) {
  $duplication_data = array(
    'source_language' => $values['source_language'],
    'translation_language' => $values['translation_language']
  );
  $batch_operations = array();

  foreach ($values['menu_items'] as $machine_name => $title) {
    if ($title) {
      $duplication_data['menu_name'] = $machine_name;

      $batch_operations[] = array('babybel_duplication_menu_set_translation_sets', array($duplication_data));
      $batch_operations[] = array('babybel_duplication_menu_duplicate', array($duplication_data));
    }
  }

  // Build the batch
  $batch = array(
    'title' => t('Duplication'),
    'init_message' => t('Initializing'),
    'progress_message' => t('Duplication of menus : operation @current out of @total.'),
    'error_message' => t('An error occured.'),
    'operations' => $batch_operations,
    'finished' => 'babybel_duplication_menu_finished',
    'file' => sprintf('%s/babybel_duplication.batch.menu.inc', drupal_get_path('module', 'babybel_duplication'))
  );

  return $batch;
}

function baybel_get_constants($prefix, $suffix = NULL, $get_value = FALSE) {
  $results = array();
  global $conf;
  $constants = get_defined_constants(TRUE)['user'];
  $constants_keys = array_keys($constants);
  foreach ($constants_keys as $key) {
    if (is_numeric(strpos($key, strtoupper($prefix)))) {
      if ($suffix == NULL || is_numeric(strpos($key, strtoupper($suffix)))) {
        $results[] = $get_value ? constant($key) : $key;
      }
    }
  }

  return empty($results) ? NULL : $results;
}

function baybel_variable_get_all($prefix = 'babybel_variable', $lang = 'en') {
  $data = db_query("SELECT * FROM {variable} WHERE name LIKE '%" . $prefix . "%'")->fetchCol();
  $result = array();
  foreach ($data as $item) {
    if ($item) {
      $array = explode('_', $item);
      if (end($array) == $lang) {
        $result[] = $item;
      }
    }
  }
  return $result;
}

/**
 * Run batch operation for variable.
 */
function duplication_build_batch_set_variables($values) {
  $batch_operations = array();

  $batch_operations[] = array('babybel_duplication_variables', array(
      array(
        'source_language' => $values['source_language'],
        'translation_language' => $values['translation_language'],
      ),
  ));

  $batch = array(
    'title' => t('Duplication'),
    'init_message' => t('Initializing'),
    'progress_message' => t('Duplication of variables : operation @current out of @total.'),
    'error_message' => t('An error occurred.'),
    'operations' => $batch_operations,
    'finished' => 'babybel_duplication_variables_finished',
    'file' => sprintf('%s/babybel_duplication.batch.variables.inc', drupal_get_path('module', 'babybel_duplication')),
  );

  return $batch;
}

/**
 * Get node translate.
 */
function babybel_get_translated_node($node, $lang_code = NULL) {
  if (!babybel_i18n_validate_node($node) || $node->tnid === 0) {
    return $node;
  }

  babybel_set_language_code($lang_code);

  $localized_nid = db_select('node', 'n')
    ->fields('n', array('nid'))
    ->condition('tnid', $node->nid, '=')
    ->condition('language', $lang_code, '=')
    ->execute()
    ->fetchField();

  return $localized_nid ? node_load($localized_nid) : $node;
}

/**
 * Implements validate node.
 */
function babybel_i18n_validate_node(&$node) {
  if (is_numeric($node)) {
    $nid = $node;
    $node = node_load($nid);
  }

  return (is_object($node) && isset($node->nid));
}

/**
 * Implements set language.
 */
function babybel_set_language_code(&$lang_code) {
  if ($lang_code === NULL) {
    return $GLOBALS['language']->language;
  }
  else {
    return is_object($lang_code) ? $lang_code->language : $lang_code;
  }
}
