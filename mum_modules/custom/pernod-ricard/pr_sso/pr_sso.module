<?php
require_once dirname(__FILE__) .DIRECTORY_SEPARATOR. 'models'.DIRECTORY_SEPARATOR.'Pr_sso_model_webserviceAutoload.php';

/*
 * Installation
 */
function pr_sso_install() {	
}


/*
 * Uninstallation
 *
 */
function pr_sso_uninstall() {
	variable_del('pr_sso_activate_role');
	variable_del('pr_sso_myportal_key');
	variable_del('pr_sso_activate_myportal');
}

function pr_sso_form_user_login_block_alter(&$form, &$form_state) {
	_pr_sso_user_login_form_alter($form, $form_state);
}

function pr_sso_form_user_login_alter(&$form, &$form_state) {
	_pr_sso_user_login_form_alter($form, $form_state);
}

function _pr_sso_user_login_form_alter(&$form, &$form_state) {
	$saveForm = $form;

	$form = array();
	
	// overrides the default validator
	foreach( $saveForm as $key => $value ) {
		if( $key == '#validate' ) {

			$form[ $key ] = array();
			foreach( $value as $validator ) {
				if( $validator == 'user_login_authenticate_validate' ) {
					$validator = 'pr_sso_authenticate_validate';
				}
				$form[ $key ][] = $validator;
			}
		} else {
			$form[ $key ] = $value;
		}
	}
}

/*
 * Check if user is a Drupal user and not an external user
 */
function pr_sso_check_drupal_user($name){

	//check if user already exist in drupal
	$user = user_load_by_name($name);
	
	if(isset($user->name)){
		//if user exist and doesn't use external login
		if(!empty($user->mail)){
			return true; 
		}
	}
	return false;
}

/*
 * 
 */
function pr_sso_authenticate_validate( $form, &$form_state ) {
	
	//Drupal classic auth
	$drupalCheckUser = pr_sso_check_drupal_user($form_state[ 'values' ][ 'name' ]);
	if($drupalCheckUser){
		return user_login_authenticate_validate($form, $form_state); 
	}
	$authenticated = pr_authentication_method($form_state[ 'values' ][ 'name' ], $form_state[ 'values' ][ 'pass' ]);

	if ($authenticated)
	{
		// this sets up the external user with Drupal by creating a local entry. If they don't exist they are added
		user_external_login_register($form_state[ 'values' ][ 'name' ], "pr_sso");

		// hook to call to assign roles
		$assign_roles = variable_get('pr_sso_activate_role');
		if($assign_roles){
			module_invoke_all('pr_sso_assign_role', $form_state[ 'values' ][ 'name' ]);
		}

		// we must set the 'uid' to pass back.  this looks up the logged in user and sets the Drupal UID
		$account = user_external_load($form_state[ 'values' ][ 'name' ]);
		$form_state['uid'] = $account->uid;
	}	
	else
	{
		// do nothing, Drupal will handle the errors
	}
}


/*
 * Log external user with pr_sso
 */
function pr_log_me_as_visitor($name, $pass){
	
	$authenticated = pr_authentication_method($name, $pass);

	if ($authenticated)
	{
		// this sets up the external user with Drupal by creating a local entry. If they don't exist they are added
		user_external_login_register($name, "pr_sso");

		// hook to call to assign roles
		$assign_roles = variable_get('pr_sso_activate_role');
		if($assign_roles){
			module_invoke_all('pr_sso_assign_role', $name);
		}

		// we must set the 'uid' to pass back.  this looks up the logged in user and sets the Drupal UID
		$account = user_external_load($name);
		$form_state['uid'] = $account->uid;
	}	
	else
	{
		drupal_set_message(t('Unrecognized E-mail and/or Password.'), 'error');
	}
}

/*
 * Authentication challenge with MyPortal and Pernod Webservice
 */
function pr_authentication_method($name, $pass){
	
	//We first try to analyse if this is an email + token sent from My Portal using the secure token SSO technique
	$is_myportal_enabled = variable_get('pr_sso_activate_myportal');
	if($is_myportal_enabled){
		$secret_key = variable_get('pr_sso_myportal_key');
		$token = md5($secret_key.strtolower($name));
		if (strcasecmp($token, $pass) == 0) return true;
	}

	//We then try against the web service in case the user submitted directly his email and password
	$pr_sso_model_webserviceServiceAuthenticate = new Pr_sso_model_webserviceServiceAuthenticate();
	$result = $pr_sso_model_webserviceServiceAuthenticate->Authenticate(new Pr_sso_model_webserviceStructAuthenticate($name,$pass));
	if($result->getAuthenticated()){
		return true;
	}

	return false;
}

/**
 * Implementation of hook_menu().
 */
function pr_sso_menu(){
  $items['pr_sso'] = array(
    'title' => t('PR SSO'),
    'page callback' => 'pr_sso_content',
    'access arguments' => array(true),
    'type' => MENU_CALLBACK,
  );
 
  $items['admin/config/people/pr_sso'] = array(
    'title' => t('Pernod-Ricard SSO settings'),
    'description' => t('Pernod-Ricard SSO configuration page'),
    'page callback' => 'drupal_get_form',
    'page arguments' => array('pr_sso_admin_settings'),
    'access arguments' => array('administer site configuration'),
    'type' => MENU_NORMAL_ITEM,
  );
 
  return $items; 
}

/*
 * Module admin settings
 */
function pr_sso_admin_settings(){

   //MyPortal
   $form['pr_sso_activate_myportal'] = array(
    '#type' => 'checkbox',
    '#title' => t('Activate MyPortal authentication'),
    '#description' => t("To login with MyPortal"),
	'#default_value' => variable_get('pr_sso_activate_myportal'),
  );	
  $form['pr_sso_myportal_key'] = array(
    '#type' => 'textfield',
    '#title' => t('Secret key for My Portal login'),
    '#description' => t("Secret key to generate md5 pass"),
	'#default_value' => variable_get('pr_sso_myportal_key'),
  );
  
  //Set role to users
  $form['pr_sso_activate_role'] = array(
    '#type' => 'checkbox',
    '#title' => t('Activate role assignment'),
    '#description' => t("Needs another module to manage it, view readme."),
	'#default_value' => variable_get('pr_sso_activate_role'),
  );
  return system_settings_form($form);
}