<?php

/**
 * Implements hook_ctools_plugin_directory(). 
 */
function widgets_ctools_plugin_directory($owner, $plugin_type) {
  if ($owner == 'ctools' && $plugin_type == 'content_types') {
    return 'plugins/' . $plugin_type;
  }
}

/**
 * Implements hook_init().
 */
function widgets_init() {
  global $user;
  if (is_array($user->roles) && in_array('administrator', $user->roles)) {
    drupal_add_css(drupal_get_path('module', 'widgets') . '/css/widget.css', array('group' => CSS_DEFAULT, 'every_page' => TRUE));
  }
}

function widgets_menu() {
  $items['node/autocomplete'] = array(
    'title' => 'Autocomplete for node',
    'page callback' => 'node_autocomplete',
    'access arguments' => array('access content'), //or whatever permission makes sense
    'type' => MENU_CALLBACK
  );

  return $items;
}

function widgets_form_field_ui_field_overview_form_alter(&$form, &$form_state, $form_id) {
  $destination = drupal_get_destination();
  //krumo($destination);
  if ($destination['destination'] == 'admin/structure/modules') {
    // $form['#after_build'][] = 'widgets_field_after_build';
  }
}

//function widgets_field_after_build($form, &$form_state) {    
//  return $form; 
//}

/**
 * @file
 * This module is a common module to support Panels and Widgets.
 * 
 */
function widgets_node_form($form, &$form_state) {
  global $language, $user;

  $form['#prefix'] = '<div id="wrapper-form-node">';
  $form['#suffix'] = '</div>';

  $conf = $form_state['conf'];
  $type = str_replace('_node_form', '', $form_state['build_info']['form_id']);
  //$language_default = $language->language;
  $nid = $node = null;

  // Get current nid with current language.
  if (isset($conf[$language->language]['nid']) && !empty($conf[$language->language]['nid'])) {
    $nid = $conf[$language->language]['nid'];
  }
  else {
    // If current entity (!= en language) is empty,
    // Then to display the entity (en) that create a new instance.
    $nid = isset($conf[language_default()->language]['nid']) ? $conf[language_default()->language]['nid'] : '';
  }

  // If entity is real node and has validated actually, then load entity instance.
  if (!empty($nid) && is_numeric($nid)) {
    $node = node_load($nid);
  }

  // Validate again before use node entity to implement.
  if (!$node) {
    $node = (object) array('uid' => $user->uid, 'name' => (isset($user->name) ? $user->name : ''), 'type' => $type, 'language' => $language->language);
  }
  else {
    if ($node->language != $language->language) {
      unset($node->nid);
      unset($node->vid);
    }
  }


  ctools_form_include_file($form_state, $form_state['plugin']['path'] . '/' . $form_state['plugin']['file']);


  // During initial form build, add the node entity to the form state for use
  // during form building and processing. During a rebuild, use what is in the
  // form state.
  if (!isset($form_state['node'])) {
    if (!isset($node->title)) {
      $node->title = NULL;
    }
    node_object_prepare($node);
    $form_state['node'] = $node;
  }
  else {
    $node = $form_state['node'];
  }

  // Some special stuff when previewing a node.
  if (isset($form_state['node_preview'])) {
    $form['#prefix'] = $form_state['node_preview'];
    $node->in_preview = TRUE;
  }
  else {
    unset($node->in_preview);
  }

  // Identify this as a node edit form.
  // @todo D8: Remove. Modules can implement hook_form_BASE_FORM_ID_alter() now.
  $form['#node_edit_form'] = TRUE;

  $form['#attributes']['class'][] = 'node-form';
  if (!empty($node->type)) {
    $form['#attributes']['class'][] = 'node-' . $node->type . '-form';
  }

  // Basic node information.
  // These elements are just values so they are not even sent to the client.
  foreach (array('nid', 'vid', 'uid', 'created', 'type', 'language') as $key) {
    $form[$key] = array(
      '#type' => 'value',
      '#value' => isset($node->$key) ? $node->$key : NULL,
    );
  }

  // Changed must be sent to the client, for later overwrite error checking.
  $form['changed'] = array(
    '#type' => 'hidden',
    '#default_value' => isset($node->changed) ? $node->changed : NULL,
  );
  // Invoke hook_form() to get the node-specific bits. Can't use node_invoke(),
  // because hook_form() needs to be able to receive $form_state by reference.
  // @todo hook_form() implementations are unable to add #validate or #submit
  //   handlers to the form buttons below. Remove hook_form() entirely.
  $function = node_type_get_base($node) . '_form';
  if (function_exists($function) && ($extra = $function($node, $form_state))) {
    $form = array_merge_recursive($form, $extra);
  }
  // If the node type has a title, and the node type form defined no special
  // weight for it, we default to a weight of -5 for consistency.
  if (isset($form['title']) && !isset($form['title']['#weight'])) {
    $form['title']['#weight'] = -5;
  }
  // @todo D8: Remove. Modules should access the node using $form_state['node'].
  $form['#node'] = $node;
  // i18n_node support.  
//  $form['language'] = array(
//    '#type' => 'select',
//    '#title' => t('Language'),
//    '#options' => i18n_node_language_list($node, FALSE, FALSE),
//    '#value' => $language_default,
//    '#disabled' => TRUE,
//  );


  // This form uses a button-level #submit handler for the form's main submit
  // action. node_form_submit() manually invokes all form-level #submit handlers
  // of the form. Without explicitly setting #submit, Form API would auto-detect
  // node_form_submit() as submit handler, but that is the button-level #submit
  // handler for the 'Save' action. To maintain backwards compatibility, a
  // #submit handler is auto-suggested for custom node type modules.

  field_attach_form('node', $node, $form, $form_state, entity_language('node', $node));
  return $form;
}

/**
 * Implements form submit on Panels Configuration.
 * For purpose to save node entity.
 */
function widgets_node_form_submit($form, &$form_state) {
  global $language;

  unset($form_state['submit_handlers']);

  $node = $form_state['node'];
  entity_form_submit_build_entity('node', $node, $form, $form_state);

  node_submit($node);
  foreach (module_implements('node_submit') as $module) {
    $function = $module . '_node_submit';
    $function($node, $form, $form_state);
  }

  $insert = empty($node->nid);

  node_save($node);
  $node_link = l(t('view'), 'node/' . $node->nid);
  $watchdog_args = array('@type' => $node->type, '%title' => $node->title);
  $t_args = array('@type' => node_type_get_name($node), '%title' => $node->title);

  if ($insert) {
    watchdog('content', '@type: added %title.', $watchdog_args, WATCHDOG_NOTICE, $node_link);
    drupal_set_message(t('@type %title has been created.', $t_args));
  }
  else {
    watchdog('content', '@type: updated %title.', $watchdog_args, WATCHDOG_NOTICE, $node_link);
    drupal_set_message(t('@type %title has been updated.', $t_args));
  }
  if ($node->nid) {
    $form_state['values']['nid'] = $node->nid;
    $form_state['nid'] = $node->nid;
    $form_state['redirect'] = node_access('view', $node) ? 'node/' . $node->nid : '<front>';
  }
  else {
    // In the unlikely case something went wrong on save, the node will be
    // rebuilt and node form redisplayed the same way as in preview.
    drupal_set_message(t('The post could not be saved.'), 'error');
    $form_state['rebuild'] = TRUE;
  }

  // Save node entity to panel via form_state[conf].
  $form_state['conf'][$language->language]['nid'] = $node->nid;

  // Clear all caches.
  cache_clear_all();
}

/**
 * Preprocess the primary entry level theme.
 */
function widgets_preprocess_panels_add_content_modal(&$vars) {
  // Override categories list. Only display modules.
  //$vars['categories'] = array('module' => $vars['categories']['modules']);
  $vars['categories_array'] = array();

  // Process the list of categories.  

  foreach ($vars['categories'] as $key => $category_info) {
    // 'root' category is actually displayed under the categories, so
    // skip it.
    if ($key == 'root') {
      continue;
    }

    $class = 'panels-modal-add-category';
    if ($key == $vars['category']) {
      $class .= ' active';
    }

    $url = $vars['renderer']->get_url('select-content', $vars['region'], $key);
    $vars['categories_array'][] = ctools_ajax_text_button($category_info['title'], $url, '', $class);
  }

  // Now render the top level buttons (aka the root category) if any.
  $vars['root_content'] = '';
  if (!empty($vars['categories']['root'])) {
    foreach ($vars['categories']['root']['content'] as $content_type) {
      $vars['root_content'] .= theme('panels_add_content_link', array('renderer' => $vars['renderer'], 'region' => $vars['region'], 'content_type' => $content_type));
    }
  }
}

/**
 * Implements render callback.
 * Return a block view within Panels or Panelizer.
 *
 */
function widgets_render($subtype, $conf, $panel_args) {  
  global $language;
  if (isset($conf[$language->language]['nid'])) {
    $nid = (int) $conf[$language->language]['nid'];
  }
  else {
    return;
  }

  if (!$nid || !is_numeric($nid)) {
    return;
  }

  $node = node_load($nid);
  if (!node_access('view', $node)) {
    return;
  }


  // Don't store viewed node data on the node, this can mess up other
  // views of the node.
  $node = clone($node);
  $block = new stdClass();
  $block->module = 'node';
  $block->delta = $node->nid;
  //$block->title = check_plain($node->title);
  $block->content = node_view($node, '');
  $block->content['links']['#access'] = FALSE;
  return $block;
}